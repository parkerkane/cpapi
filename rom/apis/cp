--[[
Copyright (c) 2012 Parker Kane <parker@friikz.net>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--]]

App = {}
AppMT = {}
AppMT.__index = App

Keys = {
    esc = 1,
    up = 200,
    down = 208,
    left = 203,
    right = 205,
    lctrl = 29,
    rctrl = 97,
    lalt = 56,
    ralt = 184,
    lshift = 42,
    shift = 54,
    bspace = 14,
    enter = 28,
    tab = 15,
    f1 = 59,
    f2 = 60,
    f3 = 61,
    f4 = 62,
    f5 = 63,
    f6 = 64,
    f7 = 65,
    f8 = 66,
    f9 = 67,
    f10 = 68,
    tilde = 0,
}

function App.new()
    local self = {}

    setmetatable(self, AppMT)

    self.laterFuncs = {}

    return self
end

--[[
Calls function later.

timeout: Timeout of seconds
func: function to be called

Examples:
> cp.callLater(5, specialFunction)
> cp.callLater(5, function()
>   rs.setOutput('back', false)
> end)
--]]
function App:callLater(timeout, func)
    local id = os.startTimer(timeout)

    self.laterFuncs[id] = func

    return id
end

--[[
Default handled for timer events. Required for callLater function.

timer: timer events parameter.

Examples:
> local evt, arg = os.pullEvent()
> if evt == 'timer' then cp.handleTimer(arg) end
--]]
function App:handleTimer(timer)

    local func = self.laterFuncs[timer]

    if func ~= nil then
        local status, err = pcall(func)
        if not status then
            error('Error calling timed function:\n - ' .. tostring(err))
        end
        self.laterFuncs[args] = nil
        return true
    end

    return false
end

--[[
Simple main loop with listener suport.

listener: Table of event listeners

Example:
> cp.main({
>     redstone = function()
>         print('redstone')
>     end;
>
>     key = function(code)
>         print('key', key)
>     end;
>
>     char = function(char)
>         print('char', char)
>     end;
>
>     timer = function(timer, ...)
>         print('timer', timer)
>     end;
>
>     default = function(a,b,c,d)
>         print('default:', a,b,c,d)
>     end
> })
--]]
function App:main(listener)
    local quit = false
    repeat
        local eventHandled = false

        args = { os.pullEventRaw() }
        evt = table.remove(args, 1);

        if evt == 'terminate' then
            error('Terminate')

        elseif evt == 'quit' then
            quit = true

        elseif evt == 'timer' then
            eventHandled = self:handleTimer(args[1])
        end

        if not eventHandled and listener ~= nil then
            local status, err
            local called = true

            if listener[evt] ~= nil then
                status, err = pcall(listener[evt], unpack(args))
            elseif listener.default ~= nil then
                status, err = pcall(listener.default, evt, unpack(args))
            else
                called = false
            end

            if not status and called then
                error("Error handing event '" .. evt .. "':\n - " .. tostring(err))
            end
        end
        until quit
end

local default = App.new()

function callLater(...) return default:callLater(...) end

function main(...) default:main(...) end