--[[
Copyright (c) 2012 Parker Kane <parker@friikz.net>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
--]]

App = {}
AppMT = {}
AppMT.__index = App

Keys = {
    esc = 1,
    up = 200,
    down = 208,
    left = 203,
    right = 205,
    lctrl = 29,
    rctrl = 97,
    lalt = 56,
    ralt = 184,
    lshift = 42,
    shift = 54,
    bspace = 14,
    enter = 28,
    tab = 15,
    f1 = 59,
    f2 = 60,
    f3 = 61,
    f4 = 62,
    f5 = 63,
    f6 = 64,
    f7 = 65,
    f8 = 66,
    f9 = 67,
    f10 = 68,
    tilde = 0,
}

function App.new()
    local self = {}

    setmetatable(self, AppMT)

    self.laterFuncs = {}

    return self
end

--[[
Calls function later.

timeout: Timeout of seconds
func: function to be called

Examples:
> cp.callLater(5, specialFunction)
> cp.callLater(5, function()
>   rs.setOutput('back', false)
> end)
--]]
function App:callLater(timeout, func)
    local id = os.startTimer(timeout)

    self.laterFuncs[id] = func

    return id
end

--[[
Default handled for timer events. Required for callLater function.

timer: timer events parameter.

Examples:
> local evt, arg = os.pullEvent()
> if evt == 'timer' then cp.handleTimer(arg) end
--]]
function App:handleTimer(timer)

    if timer.cancel == true then
        return
    end

    local func = self.laterFuncs[timer]

    if func ~= nil then
        local status, err = pcall(func)
        if not status then
            error('Error calling timed function:\n - ' .. tostring(err))
        end
        self.laterFuncs[args] = nil
        return true
    end

    return false
end

--[[
Simple main loop with listener suport.

listener: Table of event listeners

Example:
> cp.main({
>     redstone = function()
>         print('redstone')
>     end;
>
>     key = function(code)
>         print('key', key)
>     end;
>
>     char = function(char)
>         print('char', char)
>     end;
>
>     timer = function(timer, ...)
>         print('timer', timer)
>     end;
>
>     default = function(a,b,c,d)
>         print('default:', a,b,c,d)
>     end
> })
--]]
function App:main(listener)
    local quit = false
    repeat
        local eventHandled = false

        args = { os.pullEventRaw() }
        evt = table.remove(args, 1);

        if evt == 'terminate' then
            error('Terminate')

        elseif evt == 'quit' then
            quit = true

        elseif evt == 'timer' then
            eventHandled = self:handleTimer(args[1])
        end

        if not eventHandled and listener ~= nil then
            local status = true
            local err

            if listener.preEvent ~= nil then
                status, err = pcall(listener.preevent, evt, unpack(args))
            end

            if status and listener[evt] ~= nil then
                status, err = pcall(listener[evt], unpack(args))
            elseif status and listener.default ~= nil then
                status, err = pcall(listener.default, evt, unpack(args))
            end

            if status and listener.postevent ~= nil then
                status, err = pcall(listener.postevent, evt, unpack(args))
            end

            if not status then
                error("Error handing event '" .. evt .. "':\n - " .. tostring(err))
            end
        end
        until quit
end

Port = {}

local PortMT = {}

PortMT.__index = Port

--[[
Opens port

> local port = cp.portOpen('back')
--]]
function portOpen(side)
    local self = {}

    self.outBits = 0
    self.inBits = 0
    self.side = side

    local ins = setmetatable(self, PortMT)

    return ins
end

--[[
Set signal enabled.

Redstone:
> port:set()

Bundled:
> port:set(colors.white, colors.red)
--]]
function Port:set(...)

    local bits = { ... }

    if #bits == 0 then
        rs.setOutput(self.side, true)
        return
    end

    table.foreach(bits, function(idx, val)
        self.outBits = cpbit.bor(self.outBits, val)
    end)

    rs.setBundledOutput(self.side, self.outBits)
end

--[[
Clears signal.

Redstone:
> port:clear()

Bundled:
> port:clear(colors.green, colors.blue)
--]]
function Port:clear(...)
    local bits = { ... }
    local cbits = 0

    if #bits == 0 then
        rs.setOutput(self.side, false)
        return
    end

    table.foreach(bits, function(idx, val)
        cbits = cpbit.bor(cbits, val)
    end)

    self.outBits = cpbit.band(self.outBits, cpbit.bnot(cbits))

    rs.setBundledOutput(self.side, self.outBits)
end

--[[
Test input signal.

Redstone:
> port:test()

Bundled:
> port:test(colors.yellow)
--]]
function Port:test(bit)
    if bit == nil then
        return rs.getInput(self.side)
    else
        return cpbit.band(rs.getBundledInput(self.side), bit) == bit
    end
end

--[[
Test output signal.

Bundled:
> port:testOut(colors.gray)
--]]
function Port:testOut(bit)
    return cpbit.band(self.outBits, bit) == bit
end

local logTarget

--[[
Initializes remote logger.

> cp.logInit('back')
or
> cp.logInit('back', remoteComputerID)
--]]
function logInit(side, target)
    rednet.open(side)
    logTarget = target
end

--[[
Sends log message to remote computer.

> cp.log('foobar')
--]]
function log(...)
    local arg = {...}

    local msg = table.concat(arg, ' ')

    if logTarget == nil then
        rednet.broadcast(msg)
    else
        rednet.send(logTarget, msg)
    end

end

local default = App.new()

function callLater(...) return default:callLater(...) end

function main(...) default:main(...) end